{"version":3,"sources":["logo.svg","components/Album.js","components/Form.js","containers/NewAlbums.js","containers/Queue.js","App.js","components/Header.js","serviceWorker.js","index.js"],"names":["module","exports","Album","deleteAlbum","id","fetch","method","then","resp","json","success","props","src","this","album","image","artist","title","notes","onClick","e","stopPropagation","React","Component","Form","state","submit","showSubmit","setState","handleArtist","target","value","handleTitle","handleNotes","handleImage","handleSubmit","preventDefault","headers","Accept","body","JSON","stringify","newAlbum","listAlbum","type","name","onChange","placeholder","NewAlbums","console","log","albums","className","style","color","formsubmit","map","albumObj","key","clickHandler","addAlbum","Queue","queue","removeAlbum","App","instructions","revealInstructions","addAlbumFromForm","newalbum","allAlbums","push","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.04336dfa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\"\n\nclass Album extends React.Component { \n\n   deleteAlbum = (id) => {\n    fetch(`http://localhost:3000/albums/${id}`, {\n        method: 'DELETE'\n    })\n    .then(resp => resp.json())\n    .then(resp => {\n        if(resp.success){\n            this.props.deleteAlbum(id) \n        }\n    })     \n   }\n\n   render() {\n    return (\n        <div>\n            <h3>\n            <img src={this.props.album.image}/>\n                <p>Artist: {this.props.album.artist}</p>\n                    <p>Album: {this.props.album.title}</p>\n                        <p>Notes: {this.props.album.notes}</p>\n                    <button onClick={(e) => {\n                        e.stopPropagation()\n                        this.deleteAlbum(this.props.album.id)} \n                    }\n                        >Delete</button>\n            </h3>\n            \n            \n        </div>\n    )\n}\n}\nexport default Album ","import React, { Component } from \"react\"\n\nclass Form extends Component {\n    state = {\n        artist: \"\",\n        title: \"\",\n        image: \"\",\n        notes: \"\",\n        submit: false\n    }\n\n    showSubmit = () => {\n        this.setState({\n          submit: !this.state.submit\n        })\n      }\n\n    handleArtist = (e) => {\n        this.setState({artist: e.target.value})\n    }\n\n    handleTitle = (e) => {\n        this.setState({title: e.target.value})\n    }\n\n    handleNotes = (e) => {\n        this.setState({notes: e.target.value})\n    }\n    \n    handleImage = (e) => {\n        this.setState({image: e.target.value})\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.setState({\n            artist: \"\", title: \"\", image: \"\", notes: \"\"\n        })\n        // this.props.formsubmit(this.state)\n        fetch(\"http://localhost:3000/albums\", {\n            method: \"POST\",\n            headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n            },\n            body: JSON.stringify(this.state)\n        })\n        .then(resp => resp.json())\n        .then(newAlbum => {this.props.listAlbum(newAlbum)})\n    }\n\n\n\n    render(){\n        return( \n   \n            <div> \n               \n               <button onClick={this.showSubmit}>{this.state.submit ? \"Hide\" : \"\"} Form</button>\n            {this.state.submit ?  \n    <form>\n    <input type=\"text\" name=\"artist\" value={this.state.artist} onChange={this.handleArtist} placeholder=\"Artist\"></input>\n    <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.handleTitle} placeholder=\"Title\"></input>\n    <input type=\"text\" name=\"notes\" value={this.state.notes} onChange={this.handleNotes} placeholder=\"Notes\"></input>\n    <input type=\"text\" name=\"image\" value={this.state.image} onChange={this.handleImage} placeholder=\"Image\"></input>\n    <input type=\"submit\"value=\"Submit\" onClick={this.handleSubmit}></input> \n    </form>  \n    : \"\" }\n    \n    </div>    \n\n        )\n    }    \n    \n\n\n}\n\nexport default Form ","import React, { Component } from \"react\"\nimport Album from \"../components/Album\"\nimport Form from \"../components/Form\" \nimport './NewAlbums.css'\n\n\nclass NewAlbums extends Component {\n    render() {\n  console.log(this.props.albums)\n        return (\n            <div className=\"new-albums\">\n                <h2 style={{color: \"blue\"}}>Music Diary</h2>\n                <Form formsubmit={this.props.formsubmit} albums={this.props.albums} listAlbum={this.props.listAlbum}/>\n                    {\n                    this.props.albums.map((albumObj) => {\n                        return (\n                            <Album \n\n                                album={albumObj}\n                                key={albumObj.id} \n                                clickHandler={this.props.addAlbum}\n                                deleteAlbum={this.props.deleteAlbum}\n                            />\n                        )\n                    })   \n                    } \n            </div>\n        )\n    }\n}\n\nexport default NewAlbums","import React, { Component } from \"react\"\nimport Album from \"../components/Album\"\n\nclass Queue extends Component {\n\n    render() {\n        return (\n            <div className=\"listening-queue\">\n                <h2></h2>\n                    {\n                    this.props.queue.map((albumObj) => {\n                        return (\n                            <Album \n                                album={albumObj}\n                                key={albumObj.id} \n                                clickHandler={this.props.removeAlbum}\n                            />\n                        )\n                    })\n                    } \n                \n\n            </div>\n        )\n    }\n\n}\n\nexport default Queue","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport NewAlbums from \"./containers/NewAlbums\"\nimport Queue from \"./containers/Queue\"\nimport Header from \"./components/Header\" \n\nclass App extends Component {\n\nstate = {\n  albums: [],\n  queue: [],\n  instructions: false\n}\n\nrevealInstructions = () => {\n  this.setState({\n    instructions: !this.state.instructions \n  })\n}\n\ncomponentDidMount(){\n  fetch(\"http://localhost:3000/albums\")\n  .then(resp => resp.json())\n  .then(albums => {\n    this.setState({\n      albums: albums \n    })\n  })\n}\n\nlistAlbum = (newAlbum) => {\n  this.setState({\n    albums: [...this.state.albums, newAlbum] \n  })\n}\n\naddAlbumFromForm = (newalbum) => {\n  let allAlbums = [...this.state.albums]\n  allAlbums.push(newalbum)\n  this.setState({albums: allAlbums})\n\n}\n\ndeleteAlbum = (id) => {\n  this.setState({\n    albums: this.state.albums.filter(album => album.id !== id)\n})\n}\n\n\n// addAlbum = (id) => {\n//   const foundAlbum = this.state.albums.find(album => {\n//     return album.id === id \n//   })\n//   if(!this.state.queue.includes(foundAlbum)) {\n//     this.setState({\n//       queue: [...this.state.queue, foundAlbum] \n//     })\n//   }\n// }\n\n// removeAlbum = (id) => {\n//   const filteredQueue = this.state.queue.filter(album => {\n//     return album.id !== id\n//   })\n//   this.setState({\n//     queue: filteredQueue\n//   })\n// }\n\nrender() {\n  return (\n    <div className=\"album-container\">\n      {/* <button onClick={this.revealInstructions}>{this.state.instructions ? \"Hide\" : \"\"} Instructions</button>\n      {this.state.instructions ? <Header /> : \"\"} */}\n     \n      <NewAlbums \n      listAlbum={this.listAlbum}\n      albums={this.state.albums}\n      addAlbum={this.addAlbum}\n      formsubmit={this.addAlbumFromForm}\n      deleteAlbum={this.deleteAlbum}\n      \n      />\n      <Queue \n      queue={this.state.queue}\n      removeAlbum={this.removeAlbum}\n      /> \n    </div>\n  )\n  } \n} \n\nexport default App\n\n\n\n\n","import React, { Component } from \"react\"\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <h1>Music To-Do List</h1>\n                <h2>Click On A New Release to Add It To Today's Listening</h2>\n                <h2>Once You've Listened, Click On The Album To Remove It From Your List</h2>\n            </header>\n        )\n    }\n}\n\nexport default Header ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}